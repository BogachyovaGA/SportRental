import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { mockGetOrders } from '../../services/mock/mockOrderService';
import './ProfilePage.css';

interface UserData {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address?: string;
  city?: string;
  postalCode?: string;
}

interface UserOrder {
  id: number;
  status: string;
  totalAmount: number;
  createdAt: string;
  rentStart: string;
  rentEnd: string;
  items: {
    productId: number;
    days: number;
    product: {
      name: string;
      image: string;
    }
  }[];
}

const ProfilePage: React.FC = () => {
  const navigate = useNavigate();
  const [userData, setUserData] = useState<UserData | null>(null);
  const [orders, setOrders] = useState<UserOrder[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState<UserData | null>(null);
  
  useEffect(() => {
    loadUserData();
    loadUserOrders();
  }, []);
  
  const loadUserData = () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const userEmail = localStorage.getItem('userEmail') || 'test@example.com';
      const firstName = localStorage.getItem('firstName') || '–ò–≤–∞–Ω';
      const lastName = localStorage.getItem('lastName') || '–ò–≤–∞–Ω–æ–≤';
      const phone = localStorage.getItem('userPhone') || '+7 (999) 999-99-99';
      const userId = localStorage.getItem('userId') ? Number(localStorage.getItem('userId')) : 1;
      const address = localStorage.getItem('userAddress') || '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123, –∫–≤. 45';
      const city = localStorage.getItem('userCity') || '–ú–æ—Å–∫–≤–∞';
      const postalCode = localStorage.getItem('userPostalCode') || '123456';
      
      const user: UserData = {
        id: userId,
        firstName,
        lastName,
        email: userEmail,
        phone,
        address,
        city,
        postalCode
      };
      
      setUserData(user);
      setEditedData(user);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  };
  
  const loadUserOrders = async () => {
    try {
      setLoading(true);
      const userOrders = await mockGetOrders();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è UI
      const formattedOrders = userOrders.map(order => {
        return {
          id: order.id,
          status: order.status,
          totalAmount: order.totalAmount,
          createdAt: order.createdAt,
          rentStart: order.rentStart,
          rentEnd: order.rentEnd,
          items: order.items.map(item => {
            // –í –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—è product, –Ω–æ –Ω–∞–º –æ–Ω–æ –Ω—É–∂–Ω–æ –¥–ª—è UI
            // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            return {
              productId: item.productId,
              days: item.days,
              product: {
                name: `–¢–æ–≤–∞—Ä #${item.productId}`,
                image: 'https://via.placeholder.com/100x100'
              }
            };
          })
        };
      });
      
      setOrders(formattedOrders);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤');
    } finally {
      setLoading(false);
    }
  };
  
  const handleInputChange = (field: keyof UserData, value: string) => {
    if (editedData) {
      setEditedData({
        ...editedData,
        [field]: value
      });
    }
  };
  
  const handleSaveChanges = () => {
    if (!editedData) return;
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('firstName', editedData.firstName);
    localStorage.setItem('lastName', editedData.lastName);
    localStorage.setItem('userEmail', editedData.email);
    localStorage.setItem('userPhone', editedData.phone);
    
    if (editedData.address) localStorage.setItem('userAddress', editedData.address);
    if (editedData.city) localStorage.setItem('userCity', editedData.city);
    if (editedData.postalCode) localStorage.setItem('userPostalCode', editedData.postalCode);
    
    setUserData(editedData);
    setIsEditing(false);
  };
  
  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('userId');
    navigate('/login');
  };
  
  const getStatusClass = (status: string) => {
    switch(status) {
      case 'pending': return 'status-pending';
      case 'active': return 'status-active';
      case 'completed': return 'status-completed';
      case 'cancelled': return 'status-cancelled';
      default: return '';
    }
  };
  
  const getStatusLabel = (status: string) => {
    switch(status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
      case 'active': return '–ê–∫—Ç–∏–≤–µ–Ω';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
      default: return status;
    }
  };
  
  if (loading && !userData) {
    return (
      <div className="profile-loading">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...</p>
      </div>
    );
  }
  
  if (error && !userData) {
    return (
      <div className="profile-error">
        <p>{error}</p>
        <button onClick={loadUserData} className="retry-button">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }
  
  return (
    <div className="profile-page">
      <div className="profile-header">
        <h1>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h1>
        <button onClick={handleLogout} className="logout-button">–í—ã–π—Ç–∏</button>
      </div>
      
      <div className="profile-content">
        <div className="profile-sidebar">
          <div className="user-info-card">
            <div className="user-avatar">
              <div className="avatar-placeholder">
                {userData?.firstName.charAt(0)}{userData?.lastName.charAt(0)}
              </div>
            </div>
            <div className="user-details">
              <h2>{userData?.firstName} {userData?.lastName}</h2>
              <p className="user-email">{userData?.email}</p>
            </div>
            {!isEditing && (
              <button 
                className="edit-profile-button"
                onClick={() => setIsEditing(true)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
              </button>
            )}
          </div>
          
          <div className="profile-navigation">
            <Link to="/orders" className="nav-link">
              <span className="nav-icon">üì¶</span>
              –ú–æ–∏ –∑–∞–∫–∞–∑—ã
            </Link>
            <Link to="/cart" className="nav-link">
              <span className="nav-icon">üõí</span>
              –ö–æ—Ä–∑–∏–Ω–∞
            </Link>
            <hr className="nav-divider" />
            <button className="nav-link logout-link" onClick={handleLogout}>
              <span className="nav-icon">üö™</span>
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
        
        <div className="profile-main">
          <div className="profile-section">
            <h2>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>
            
            {isEditing ? (
              <div className="edit-form">
                <div className="form-row">
                  <div className="form-group">
                    <label>–ò–º—è</label>
                    <input 
                      type="text" 
                      value={editedData?.firstName || ''} 
                      onChange={(e) => handleInputChange('firstName', e.target.value)}
                    />
                  </div>
                  <div className="form-group">
                    <label>–§–∞–º–∏–ª–∏—è</label>
                    <input 
                      type="text" 
                      value={editedData?.lastName || ''} 
                      onChange={(e) => handleInputChange('lastName', e.target.value)}
                    />
                  </div>
                </div>
                <div className="form-row">
                  <div className="form-group">
                    <label>Email</label>
                    <input 
                      type="email" 
                      value={editedData?.email || ''} 
                      onChange={(e) => handleInputChange('email', e.target.value)}
                    />
                  </div>
                  <div className="form-group">
                    <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
                    <input 
                      type="tel" 
                      value={editedData?.phone || ''} 
                      onChange={(e) => handleInputChange('phone', e.target.value)}
                    />
                  </div>
                </div>
                
                <h3>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
                <div className="form-group full-width">
                  <label>–ê–¥—Ä–µ—Å</label>
                  <input 
                    type="text" 
                    value={editedData?.address || ''} 
                    onChange={(e) => handleInputChange('address', e.target.value)}
                  />
                </div>
                <div className="form-row">
                  <div className="form-group">
                    <label>–ì–æ—Ä–æ–¥</label>
                    <input 
                      type="text" 
                      value={editedData?.city || ''} 
                      onChange={(e) => handleInputChange('city', e.target.value)}
                    />
                  </div>
                  <div className="form-group">
                    <label>–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å</label>
                    <input 
                      type="text" 
                      value={editedData?.postalCode || ''} 
                      onChange={(e) => handleInputChange('postalCode', e.target.value)}
                    />
                  </div>
                </div>
                
                <div className="form-actions">
                  <button 
                    type="button" 
                    className="cancel-button"
                    onClick={() => {
                      setIsEditing(false);
                      setEditedData(userData);
                    }}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button 
                    type="button" 
                    className="save-button"
                    onClick={handleSaveChanges}
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  </button>
                </div>
              </div>
            ) : (
              <div className="user-data">
                <div className="data-row">
                  <div className="data-group">
                    <span className="data-label">–ò–º—è:</span>
                    <span className="data-value">{userData?.firstName}</span>
                  </div>
                  <div className="data-group">
                    <span className="data-label">–§–∞–º–∏–ª–∏—è:</span>
                    <span className="data-value">{userData?.lastName}</span>
                  </div>
                </div>
                <div className="data-row">
                  <div className="data-group">
                    <span className="data-label">Email:</span>
                    <span className="data-value">{userData?.email}</span>
                  </div>
                  <div className="data-group">
                    <span className="data-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                    <span className="data-value">{userData?.phone}</span>
                  </div>
                </div>
                
                <h3>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
                <div className="data-row">
                  <div className="data-group full-width">
                    <span className="data-label">–ê–¥—Ä–µ—Å:</span>
                    <span className="data-value">{userData?.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                </div>
                <div className="data-row">
                  <div className="data-group">
                    <span className="data-label">–ì–æ—Ä–æ–¥:</span>
                    <span className="data-value">{userData?.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  <div className="data-group">
                    <span className="data-label">–ò–Ω–¥–µ–∫—Å:</span>
                    <span className="data-value">{userData?.postalCode || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="profile-section">
            <div className="section-header">
              <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</h2>
              <Link to="/orders" className="view-all">–í—Å–µ –∑–∞–∫–∞–∑—ã</Link>
            </div>
            
            {loading ? (
              <div className="orders-loading">
                <div className="spinner-small"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
              </div>
            ) : orders.length > 0 ? (
              <div className="recent-orders">
                {orders.slice(0, 3).map(order => (
                  <div key={order.id} className="order-card">
                    <div className="order-header">
                      <span className="order-number">–ó–∞–∫–∞–∑ #{order.id}</span>
                      <span className={`order-status ${getStatusClass(order.status)}`}>
                        {getStatusLabel(order.status)}
                      </span>
                    </div>
                    <div className="order-dates">
                      <span>–° {order.rentStart} –ø–æ {order.rentEnd}</span>
                      <span>–°–æ–∑–¥–∞–Ω: {order.createdAt}</span>
                    </div>
                    <div className="order-items">
                      {order.items.map((item, index) => (
                        <div key={index} className="order-item">
                          <div className="item-image">
                            <img src={item.product.image} alt={item.product.name} />
                          </div>
                          <div className="item-name">{item.product.name}</div>
                          <div className="item-days">{item.days} {item.days === 1 ? '–¥–µ–Ω—å' : item.days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}</div>
                        </div>
                      ))}
                    </div>
                    <div className="order-footer">
                      <span className="order-total">–ò—Ç–æ–≥–æ: {order.totalAmount} ‚ÇΩ</span>
                      <Link to={`/orders/${order.id}`} className="order-details-link">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-orders">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>
                <Link to="/catalog" className="browse-catalog">
                  –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
                </Link>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage; 